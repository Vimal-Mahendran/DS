#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* rear = NULL;

void enqueue(int num) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = num;
    
    if (rear == NULL) {
        newNode->next = newNode;
        rear = newNode;
    } else {
        newNode->next = rear->next;
        rear->next = newNode;
        rear = newNode;
    }

    printf("%d enqueued\n", num);
}

void dequeue() {
    if (rear == NULL) {
        printf("Underflow\n");
    } else {
        struct Node* front = rear->next;
        printf("%d dequeued\n", front->data);

        if (front->next == front) {
            free(front);
            rear = NULL;
        } else {
            rear->next = front->next;
            free(front);
        }
    }
}

void display() {
    if (rear == NULL) {
        printf("Underflow\n");
    } else {
        struct Node* current = rear->next;
        do {
            printf("%d ", current->data);
            current = current->next;
        } while (current != rear->next);
        printf("\n");
    }
}

void peek() {
    if (rear == NULL) {
        printf("Underflow\n");
    } else {
        printf("%d\n", rear->next->data);
    }
}

int main() {
    int c, num;
    printf("1.Enqueue\n2.Dequeue\n3.Display\n4.Peek\n5.Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &c);

    while (c != 5) {
        switch (c) {
            case 1:
                printf("Enter the number to enqueue: ");
                scanf("%d", &num);
                enqueue(num);
                break;

            case 2:
                dequeue();
                break;

            case 3:
                display();
                break;

            case 4:
                peek();
                break;

            default:
                printf("Enter a valid choice.\n");
        }
        printf("1.Enqueue\n2.Dequeue\n3.Display\n4.Peek\n5.Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &c);
    }

    return 0;
}
